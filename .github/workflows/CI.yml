name: Python CI Checks

on:
  push: # 在推送到主分支或开发分支时触发
    branches:
      - main
      - develop # 或者您常用的开发分支
  pull_request: # 在创建或更新 Pull Request 时触发
    branches:
      - main
      - develop

jobs:
  lint-and-test:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu Runner
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"] # 测试多个 Python 版本

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # 拉取代码

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # 缓存 pip 依赖，加快后续运行

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # 确保您有一个 requirements.txt 文件
        # 如果有测试专用的依赖，可以放在 requirements-dev.txt 中
        # pip install -r requirements-dev.txt

    - name: Lint with Flake8
      run: |
        pip install flake8
        # 运行 flake8，可以根据需要调整参数
        # 例如，排除某些目录或文件，设置最大行长等
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 或者更严格的检查:
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Static Type Check with MyPy (Optional)
      if: always() # 即使 lint 失败也尝试运行，或者根据需要调整
      run: |
        pip install mypy
        # 运行 mypy，您可能需要配置一个 mypy.ini 文件来指定检查的严格程度和路径
        mypy src/ --ignore-missing-imports # 示例：检查 src 目录，忽略缺失的导入（对于某些第三方库）

    - name: Run Unit Tests with Pytest
      run: |
        pip install pytest pytest-cov # pytest-cov 用于生成代码覆盖率报告
        # 运行 pytest，它会自动发现并运行 tests/ 目录下的测试文件
        # 您可以指定测试路径，例如：pytest tests/unit
        pytest tests/ --cov=src --cov-report=xml # 运行测试并生成覆盖率报告

    # - name: Upload coverage reports to Codecov (Optional)
    #   uses: codecov/codecov-action@v4
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # 需要在 GitHub secrets 中配置 Codecov token
    #     files: ./coverage.xml # 指定覆盖率报告文件
    #     flags: unittests # 可选的标志
    #     name: codecov-umbrella # 可选的名称
    #     fail_ci_if_error: true # 如果上传失败，则 CI 失败
    #     verbose: true

    # 可选：构建文档 (如果使用 Sphinx 等)
    # - name: Build Documentation
    #   run: |
    #     pip install sphinx sphinx-rtd-theme
    #     sphinx-build -b html docs/source docs/build

    # 可选：运行 Notebooks (如果需要检查它们是否能无错运行)
    # 使用 nbconvert 或 papermill
    # - name: Test Notebooks
    #   run: |
    #     pip install nbconvert jupyter
    #     # 示例：尝试转换所有 notebooks 目录下的 .ipynb 文件
    #     find notebooks -name "*.ipynb" -exec jupyter nbconvert --to script --output-dir /tmp {} \;
    #     # 或者使用 papermill 执行并检查错误
    #     # pip install papermill
    #     # papermill notebooks/smpl_check.ipynb notebooks/smpl_check_output.ipynb -k python3

#  build-docker-image: # 可选作业：如果您使用 Docker
#    needs: lint-and-test # 依赖于 lint-and-test 作业成功
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main' # 只在主分支上构建 Docker 镜像
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v4
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Login to Docker Hub (or other registry)
#      uses: docker/login-action@v3
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#    - name: Build and push Docker image
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        file: ./Dockerfile # 确保您有一个 Dockerfile
#        push: true
#        tags: yourdockerhubusername/human-pose-smoothing:latest,yourdockerhubusername/human-pose-smoothing:${{ github.sha }}
